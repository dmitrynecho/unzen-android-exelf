apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'
apply from: 'inspect-files.gradle'
apply from: 'zen-tasks-graph.gradle'
apply from: 'zen-build-bundles.gradle'

android {
    namespace 'unzen.exelf'
    ndkVersion exelfNdkVersion
    defaultConfig {
        applicationId "unzen.exelf"
        minSdkVersion exelfMinSdkVersion
        compileSdk exelfCompileSdkVersion
        targetSdkVersion exelfTargetSdkVersion
        versionCode baseVersion
        versionName "$baseVersion"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.debug
        buildConfigField("int", "BASE_VERSION_CODE", "$baseVersion")
    }
    buildTypes {
        debug {
            versionNameSuffix "D"
            minifyEnabled false
        }
        release {
            versionNameSuffix "R"
            minifyEnabled false
            ndk.debugSymbolLevel = 'none'
        }
    }
    buildFeatures.buildConfig = true

    //noinspection GrDeprecatedAPIUsage TAG3
    flavorDimensions "abi"

    productFlavors {
        x64 {
            versionCode 4 + android.defaultConfig.versionCode
            versionName "$versionCode+X64"
            ndk {
                abiFilters "x86_64"
            }
            ext {
                abis = ["x86_64"]
            }
        }
        x32 {
            versionCode 3 + android.defaultConfig.versionCode
            versionName "$versionCode+X32"
            ndk {
                //noinspection ChromeOsAbiSupport
                abiFilters "x86"
            }
            ext {
                abis = ["x86"]
            }
        }
        a64 {
            versionCode 2 + android.defaultConfig.versionCode
            versionName "$versionCode+A64"
            ndk {
                //noinspection ChromeOsAbiSupport
                abiFilters "arm64-v8a"
            }
            ext {
                abis = ["arm64-v8a"]
            }
        }
        a32 {
            versionCode 1 + android.defaultConfig.versionCode
            versionName "$versionCode+A32"
            ndk {
                //noinspection ChromeOsAbiSupport
                abiFilters "armeabi-v7a"
            }
            ext {
                abis = ["armeabi-v7a"]
            }
        }
        fat {
            versionCode android.defaultConfig.versionCode
            versionName "$versionCode+FAT"
            ndk {
                //noinspection ChromeOsAbiSupport
                abiFilters = baseAbis
            }
            ext {
                abis = baseAbis
            }
        }
    }

    //noinspection GrDeprecatedAPIUsage TAG4
    variantFilter { variant ->
        ArrayList<String> names = variant.flavors*.name
        if (variant.buildType.name != "release" && !names.contains("fat")) {
            setIgnore(true)
        }
        if (releaseBundle) {
            if (!names.contains("fat")) {
                setIgnore(true)
            }
            List<String> variants = releaseBundleVariants
            Boolean found = false
            variants.forEach { String bt ->
                if (names.contains(bt)) {
                    found = true
                }
            }
            found = found || variants.contains(variant.buildType.name)
            if (!found) {
                setIgnore(true)
            }
        }
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging = true
        }
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

android.applicationVariants.configureEach { variant ->
    variant.outputs.configureEach { output ->
        outputFileName = "unzen-exelf-${variant.versionName}.apk"
    }
}

ext.generateMultiapk = { File aab, boolean local ->
    String apksName = aab.name.replace('.aab', '.apks')
    def execBytes = new ByteArrayOutputStream()
    exec {
        commandLine "java", "-jar", getBundletool(),
                "build-apks",
                local ? "--local-testing" : "",
                "--bundle=${aab}",
                "--output=${aab.parent}/${apksName}"
        standardOutput = execBytes
    }
    if (execBytes.size() != 0) {
        println("generateMultiapk bundletool: " + execBytes.toString().trim())
    }
}

ext.generateMultiapks = { String path, boolean localTesting ->
    File pathFile = file(path)
    if (pathFile.directory) {
        fileTree(dir: path, includes: ['*.aab']).each { File aab ->
            generateMultiapk(aab, localTesting)
        }
    } else if (path.endsWith(".aab")) {
        generateMultiapk(pathFile, localTesting)
    } else {
        throw new GradleException("generateMultiapks invalid path: $path")
    }
}

ext.installMultiapk = { String path ->
    def outBytes = new ByteArrayOutputStream()
    def errBytes = new ByteArrayOutputStream()
    exec {
        ignoreExitValue true
        commandLine 'java', '-jar', getBundletool(),
                'install-apks',
                "--apks=$path"
        standardOutput = outBytes
        errorOutput = errBytes
    }
    String out = outBytes.toString().trim()
    String err = errBytes.toString().trim()
    println("installMultiapk $path: [$out], [$err]")
}

tasks.register("releaseBundles") {
    group = "aleph"
    description = "Public App Bundles build."
    doLast {
        file("build/outputs/bundle").listFiles().each { File dir ->
            copy {
                from dir
                include "*.aab"
                into zenPackReleaseDir
            }
        }
        file(zenPackReleaseDir).listFiles().each { File aab ->
            if (!aab.name.endsWith(".aab")) return
            String path = aab.absolutePath
            File apksFile = file(path.replace(".aab", ".apks"))
            apksFile.delete()
            generateMultiapks(path, false)
            installMultiapk(apksFile.absolutePath)
        }
        runApk("unzen.exelf", "unzen.exelf.MainActivity")
    }
    dependsOn tasks.named(zenPackBundlesTaskName)
}

tasks.register("uninstallApp") {
    group = "aleph"
    dependsOn tasks.named("uninstallAll")
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':lib-cuscuta')
    implementation 'androidx.annotation:annotation:1.8.2'
    implementation 'androidx.core:core-ktx:1.13.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test:runner:1.6.2'
}