File getSrcDir() {
    Project p = project(":$zenPackProjectName")
    String buildDir = p.getLayout().buildDirectory.asFile.get().absolutePath
    String pathStart = "$buildDir/intermediates/merged_native_libs"
    return file("$pathStart/release/mergeReleaseNativeLibs/out/lib")
}

tasks.register(zenPackBundlesTaskName, Zip) {
    archiveFileName = "symbols.zip"
    destinationDirectory = file("$zenPackReleaseDir")
    from getSrcDir()
    baseAbis.each { abi ->
        zenPackSosList.each { prog ->
            include "$abi/lib${prog}.so"
        }
    }
    doFirst {
        delete(file("$zenPackReleaseDir/symbols.zip"))
        delete(file("$zenPackReleaseDir/ndk-stack"))
    }
    doLast {
        baseAbis.each { abi ->
            copy {
                from getSrcDir()
                into file("$zenPackReleaseDir/ndk-stack")
                zenPackSosList.each { prog ->
                    include "$abi/lib${prog}.so"
                }
                zenPackElfsList.each { prog ->
                    include "$abi/lib${prog}.so"
                }
            }
        }
    }
    dependsOn tasks.named("bundle")
    outputs.upToDateWhen { false }
}

ext.getBundletool = {
    String error = "\"bundletool\" search in $it"
    String bundletool
    zenPackBundletoolDir.eachFileMatch(~"bundletool.+\\.jar", {
        if (bundletool) {
            String m = "$error: multiple matches, leave only one."
            throw new GradleException(m)
        }
        bundletool = it.absolutePath
    })
    if (!bundletool) {
        String m = "$error: zero matches, add \"bundletool\"."
        throw new GradleException(m)
    }
    return bundletool
}

ext.installSplitApks = { String path ->
    def outBytes = new ByteArrayOutputStream()
    def errBytes = new ByteArrayOutputStream()
    exec {
        ignoreExitValue true
        // java -jar <path>/bundletool-all-<version>.jar
        //     install-apks --apks=<path>/<name>.apks
        commandLine 'java', '-jar', getBundletool(),
                'install-apks',
                "--apks=$path"
        standardOutput = outBytes
        errorOutput = errBytes
    }
    String out = outBytes.toString().trim()
    String err = errBytes.toString().trim()
    println("installMultiapk $path: [$out], [$err]")
}