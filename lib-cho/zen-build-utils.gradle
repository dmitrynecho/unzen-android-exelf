ext.projectBuildPath = { Project p, String path ->
    DirectoryProperty buildDir = p.getLayout().getBuildDirectory()
    return buildDir.file(path).get().asFile.absolutePath
}

ext.runApk = { Project p, String appId, String activity ->
    String target = "$appId/$activity"
    def outBytes = new ByteArrayOutputStream()
    def errBytes = new ByteArrayOutputStream()
    exec {
        ignoreExitValue true
        commandLine p.android.getAdbExe().absolutePath, 'shell', "am start -n $target"
        standardOutput = outBytes
        errorOutput = errBytes
    }
    String out = outBytes.toString().trim()
    String err = errBytes.toString().trim()
    String outType1 = "Starting: Intent { cmp=$target }"
    String[] activitySplit = activity.split('\\.')
    String activityName = activitySplit[activitySplit.length -1]
    String outType2 = "Starting: Intent { cmp=$appId/.$activityName }"
    boolean outValid = out == outType1 || out == outType2
    if (!outValid || !err.isEmpty()) {
        throw new GradleException("run failed, out: $out, err: $err")
    }
}

ext.getBundletool = {
    String error = "\"bundletool\" search in $it"
    String bundletool
    zenPackBundletoolDir.eachFileMatch(~"bundletool.+\\.jar", {
        if (bundletool) {
            String m = "$error: multiple matches, leave only one."
            throw new GradleException(m)
        }
        bundletool = it.absolutePath
    })
    if (!bundletool) {
        String m = "$error: zero matches, add \"bundletool\"."
        throw new GradleException(m)
    }
    return bundletool
}

ext.installApk = { Project p, String path, boolean allowDonwgrade ->
    def outBytes = new ByteArrayOutputStream()
    def errBytes = new ByteArrayOutputStream()
    exec {
        ignoreExitValue true
        if (allowDonwgrade) {
            commandLine p.android.getAdbExe().absolutePath, 'install', '-r', path
        } else {
            commandLine p.android.getAdbExe().absolutePath, 'install', '-r', '-d', path
        }
        standardOutput = outBytes
        errorOutput = errBytes
    }
    String out = outBytes.toString().trim()
    String err = errBytes.toString().trim()
    String outType1 = "Performing Streamed Install\nSuccess"
    String outType2 = "Performing Push Install"
    boolean outValid = out == outType1 || out.startsWith(outType2)
    if (!outValid || !err.isEmpty()) {
        throw new GradleException("installApk fail $path: [$out], [$err]")
    }
    println("installApk success $path")
}

ext.installSplitApks = { String path ->
    def outBytes = new ByteArrayOutputStream()
    def errBytes = new ByteArrayOutputStream()
    exec {
        ignoreExitValue true
        // java -jar <path>/bundletool-all-<version>.jar
        //     install-apks --apks=<path>/<name>.apks
        commandLine 'java', '-jar', getBundletool(),
                'install-apks',
                "--apks=$path"
        standardOutput = outBytes
        errorOutput = errBytes
    }
    String out = outBytes.toString().trim()
    String err = errBytes.toString().trim()
    // Looks like "bundletool" writes normal output into error output.
    if (!err.startsWith("The APKs have been extracted in the directory")) {
        throw new GradleException("installSplitApks fail $path: [$out], [$err]")
    }
    println("installSplitApks success $path")
}

ext.installSplitApksAll = { String path ->
    fileTree(dir: path, includes: ['*.apks']).each { File apks ->
        installSplitApks(apks.absolutePath)
    }
}

ext.bundlesToApks = { String path, Properties ksp, boolean universal, boolean local ->
    File pathFile = file(path)
    ArrayList<File> aabs = new ArrayList<>()
    if (pathFile.directory) {
        fileTree(dir: path, includes: ['*.aab']).each { File aab -> aabs.add(aab) }
    } else if (path.endsWith(".aab")) {
        aabs.add(pathFile)
    } else {
        throw new GradleException("splitApksFromBundles invalid path: $path")
    }
    aabs.forEach { File aab ->
        // In case "universal = true" single universal APK still packed into ZIP with TOC file.
        String apksName = aab.name.replace('.aab', '.apks')
        def commands = ["java", "-jar", getBundletool(), "build-apks"]
        if (universal) {
            commands.add("--mode=universal")
        }
        if (local) {
            commands.add("--local-testing")
        }
        commands.add("--bundle=${aab}")
        commands.add("--output=${aab.parent}/${apksName}")
        if (ksp != null) {
            commands.add("--ks=${ksp['storePath']}")
            commands.add("--ks-pass=pass:${ksp['storePassword']}")
            commands.add("--ks-key-alias=${ksp['keyAlias']}")
            commands.add("--key-pass=pass:${ksp['keyPassword']}")
        }
        def execBytes = new ByteArrayOutputStream()
        exec {
            commandLine (*commands)
            standardOutput = execBytes
        }
        if (execBytes.size() != 0) {
            println("bundleToApks bundletool: " + execBytes.toString().trim())
        }
    }
}

ext.addUninstallAllShortcut = { Project p ->
    String zenUninstallAllTaskName = "zenUninstallAll"
    //noinspection ConfigurationAvoidance
    if (p.tasks.findByName(zenUninstallAllTaskName) == null) {
        p.tasks.register(zenUninstallAllTaskName) {
            group = "aleph"
            dependsOn p.tasks.named("uninstallAll")
        }
    }
}