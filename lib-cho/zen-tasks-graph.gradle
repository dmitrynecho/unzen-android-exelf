import org.gradle.api.internal.tasks.DefaultTaskInputs

def tasksToStrings = new LinkedHashMap<String, String>()
String genTasksGraphTaskNameAssemble = "tasksGraphMakeApk"
String genTasksGraphTaskNameBundle = "tasksGraphMakeBun"
File reportAssemble = file("$rootDir/docs/tasks-graph-apk.txt")
File reportBundle = file("$rootDir/docs/tasks-graph-bun.txt")

@SuppressWarnings('GrMethodMayBeStatic')
boolean isKotlinException(String taskName) {
    if (taskName.startsWith("compile") && taskName.endsWith("Kotlin")) {
        return true
    }
    if (taskName.startsWith("process") && taskName.endsWith("JavaRes")) {
        return true
    }
    return false
}

@SuppressWarnings('GrMethodMayBeStatic')
String taskToString(Task task) {
    String kotlinException = "Querying input of Kotlin tasks" +
            " before they completed throws exception"
    String inputIgnore = "org.gradle.api.internal.tasks.DefaultTaskInputs"
    StringBuffer taskInfo = new StringBuffer()
    taskInfo << task.path
    def dependsOnList = new LinkedList<String>()
    task.dependsOn.forEach { dep ->
        //dependsOnList.add("D: " + dep)
    }
    if (!dependsOnList.isEmpty()) {
        taskInfo << "\n" << dependsOnList.sort().join("\n")
    }
    task.inputs.eachWithIndex { it, i ->
        if (it instanceof File) {
            taskInfo << "\nI: ${beautifyInput(it.absolutePath)}"
        } else if (it instanceof DefaultTaskInputs) {
            if (isKotlinException(task.name)) {
                taskInfo << "\nI: $kotlinException"
            } else {
                ((DefaultTaskInputs) it).sourceFiles.forEach { file ->
                    if (file instanceof File) {
                        taskInfo << "\nI: ${beautifyInput(file.absolutePath)}"
                    }
                }
            }
        } else {
            String input = it.toString()
            if (!input.startsWith(inputIgnore)) {
                taskInfo << "\nI: ${beautifyInput(input)}"
            }
        }
    }
    task.outputs.files.eachWithIndex { File file, i ->
        taskInfo << "\nO: ${beautifyOutput(file.absolutePath)}"
    }
    return taskInfo.toString()
}

afterEvaluate { Project project ->
    gradle.taskGraph.whenReady { TaskExecutionGraph taskExecutionGraph ->
        tasksToStrings.clear()
        File reportFile = null
        taskExecutionGraph.getAllTasks().eachWithIndex{ Task task, int i ->
            tasksToStrings.put(task.path, taskToString(task))
            if (task.name == genTasksGraphTaskNameAssemble) {
                reportFile = reportAssemble
            } else if (task.name == genTasksGraphTaskNameBundle) {
                reportFile = reportBundle
            }
        }
        if (reportFile != null) {
            if (!reportFile.exists()) {
                reportFile.createNewFile()
            }
            StringBuilder report = new StringBuilder()
            tasksToStrings.values().eachWithIndex { String task, int i ->
                if (report.length() > 0) {
                    report.append("\n\n")
                }
                report.append(i).append(" ").append(task)
            }
            reportFile.text = report.toString()
        }
    }
}

// TODO. TAG5, tasks graph instability.
tasks.register(genTasksGraphTaskNameAssemble) {
    group = "aleph"
    dependsOn tasks.named("assemble")
}

// TODO. TAG5, tasks graph instability.
tasks.register(genTasksGraphTaskNameBundle) {
    group = "aleph"
    dependsOn tasks.named("bundle")
}